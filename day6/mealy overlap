// Code your design here
module mealyoverlap(input bit clk, rst, a, output reg out);
  
  reg [1:0] state,nextstate;
  parameter s0 = 2'b00;
  parameter s1 = 2'b01;
  parameter s2 = 2'b10;
  parameter s3 = 2'b11;
   
 
  always @(posedge clk or posedge rst)begin
    if(rst==0)
      state<=s0;
    else 
      state<=nextstate;
   
  end
  always@(*)begin
    case(state)
      s0:begin

        if(a==1) begin
                  out<=1'b0;
        nextstate <= s1;
        end
        else nextstate<= s0;
      end
      s1:begin
      
        if(a==0) begin
            out<=1'b0;
          nextstate <=s2;
        end
        else nextstate <= s1;
      end
      s2:begin
        
        if(a==1) begin
            out<=1'b0;
          nextstate <=s3;
        end
        else nextstate<=s0;
      end
      s3:begin
        
        if(a==0)
          out<=1'b1;
        
        else out<=1'b0;
        
        if(a==0) nextstate <=s2;
        else nextstate <=s1;
      end
      default : begin
        out <=1'b0;
        nextstate <=s0;
      end
        endcase
  end
      
      endmodule
      module mealyoverlaptb;
  reg clk, rst, a;         
  wire out;
  
  mealyoverlap uut (.clk(clk),.rst(rst),.a(a),.out(out));
  initial begin
    $dumpfile("mealyoverlap.vcd");
    $dumpvars((1),mealyoverlaptb);
  end
  initial 
    forever  #2 clk =~clk;
   
  initial begin
    clk=0;
     rst = 0;a=1;
    
   #2 rst =1;
     #4 a=1;
     #4 a=0;
     #4 a=1;
     #4 a=0;
  end
 initial begin
    
    $monitor(" time %t input values : a=%b,clk =%b,rst =%b,output values : out=%b",$time,a,clk,rst,out);
    #100
    $finish;
  end
endmodule
  
  
 
