module mooreoverlap1001(input  clk, rst, a, output reg out);
  
  reg [2:0] state,nextstate;
  parameter s0 = 3'b000;
  parameter s1 = 3'b001;
  parameter s2 = 3'b010;
  parameter s3 = 3'b011;
  parameter s4=  3'b100;
 
  always@(posedge clk or posedge rst)begin
    if(rst==0)begin
      out<=1'b0;
      state<=s0;
    end
    else begin
      state=nextstate;
    case(state)
      s0:begin
        out=1'b0;
      if(a==1)
          nextstate=s1;
      
        else
          nextstate=s0;
      end
      
      s1:begin
        out=1'b0;
          if(a==0) 
          nextstate=s2;
      
        else 
          nextstate=s1;
      end 
     
      
      s2:begin
        out=1'b0;
        if(a==1) 
          nextstate=s3;
        
        else 
          nextstate=s0;
      end 
      
      s3:begin
        out=1'b0;
        if(a==0) 
          nextstate=s4;
        else 
          nextstate=s1;
      end
      
      
      s4:begin
        out=1'b1;
        if(a==1)
          nextstate=s3;
        else 
          nextstate=s0;
      end
      
      default:
        nextstate=s0;
    endcase
    end
  end
      endmodule
 module moore1001;
reg clk,rst,a;
wire out;

        mooreoverlap1001 uut (.clk(clk),.rst(rst),.a(a),.out(out));
        
 initial begin
   clk=0;
forever #5 clk=~clk;
 end
        
        initial begin
          $dumpfile("mooreoverlap1001.vcd");
          $dumpvars((1),moore1001);
        end
        
initial begin
rst=0; a=0;

#10 rst=1;

#10 a=1;
#10 a=0;
#10 a=1;
#10 a=0;

#40 $finish;
end
endmodule
     

 

